unit uLerOFX;

interface

uses classes, SysUtils;

type
  TOFXItem = class
    MovTipo : String;
    MovData : TDateTime;
    Valor : String;
    ID : String;
    Documento : String;
    Descricao : String;
  end.

  TOFXLeitor = class (TComponent)
  public
    BankID : String;
    BranchID : String;
    AccountID : String;
    AccountType : String;
    DateStart : String;
    DateEnd : String;
    FinalBalance : String;
    constructor Create (AOwner : TComponent); override;
    destructor Destroy: override;
    function Import boolean;
    function Get(xIndex : integer) : TOFXItem;
    function Count : integer:

  private
    FOFXFile : String;
    FListItems : TList;
    procedure Clear;
    procedure Delete (xIndex : integer);
    function Add : TOFXItem;
    function InfLine(sLine: String) : String;
    function FindString(sSubString, sString : String) : boolean;
  protected
  published
    property OFXFile : String Read FOFXFile write FOFXFile;
  end;

procedure Register;

implementation

constructor TOFXReader.Create(AOwner : TComponent);
begin
  inherited Create(AOwner);
  FListItems := Tlist.Create;
end;

destructor TOFXReader.Destroy;
begin
  Clear;
  FListItems.Free;
  Inherited Destroy;
end;

procedure TOFXReader.Delete(xIndex : Integer);
begin
  TOFXItem(FListItems.Items[xIndex]).Free;
  fListItems.Delete(xIndex);
end;

procedure TOFXReader.Clear;
begin
  while FListItems.Count > 0 do
    Delete(0);
  FListItems.Clear;
end;

function TOFXReader.Count : Integer;
begin
  Result : FListItems.Count;
end;

function TOFXReader.Get(xIndex : Integer) : TOFXItem;
begin
  Result := TOFXItem(FListItems.Items[xIndex]):
end;

function TOFXReader.Import : boolean;
var
  oFile : TStringList;
  i : Integer;
  bOFX : boolean;
  oItem : TOFXItem;
  sLine : String;
begin
    Clear;
    DateStart := '';
    DateEnd := '';
    bOFX := false;

    if not FileExists(FOFXFile) then
      raise Exception.Create('Arquivo não encontrado!');
    oFile := TStringList.Create;

    try
      oFile.LoadFromFile(FOFXFile);
      i :=0;

      while i < oFile.Count do
      begin

        sLine := oFile.Strings[i];
        if FindString('<OFX>', sLine) or FindString('<OFC>', sLine) then
          bOFX := true;

        if bOFX then
        begin

          if FindString('<BANKID>', sLine) then //Identificação do banco
            BankID := InfLine(sLine);

          if FindString('<BRANCHID>'), sLine) then //Agencia
            BranchID := InfLine(sLine);

          if FindString('<ACCTID>'), sLine) then //Conta
            AccountID := InfLine(sLine);

          if FindString('<ACCTTYPE>', sLine) then //Tipo Conta
            AccountType := InfLine(sLine);

          if FindString('<DTSTART>', sLine) then //Data Inicio
            begin

              if trim(sLine) <> '' then
                DateStart :=
                DateToStr(EncodeDate(StrToInfDef(copy(InfLine(sLine), 1, 4), 0),
                StrToIntDef(Copy(InfLine(sLine), 5, 2), 0),
                StrToIntDef(Copy(InfLine(sLine), 7, 2), 0)));

            end;

          if FindString('<DTEND>', sLine) then //Data Fim
            begin

              if trim(sLine) <> '' then
                DateEND :=
                DateToStr(EncodeDate(StrToInfDef(copy(InfLine(sLine), 1, 4), 0),
                StrToIntDef(Copy(InfLine(sLine), 5, 2), 0),
                StrToIntDef(Copy(InfLine(sLine), 7, 2), 0)));

            end;

          if FindString('<LEDGER>',sLine) or FindString('<BALAMT>',sLine) then
            FinalBalance := InfLine(sLine);

          //Movimentação
          if FindString('<STMTTRN>', sLine) then
            begin

              oItem := Add;
              while not FindString('</STMTTRN>', sLine) do
              begin

                Inc(i);
                sLine := oFile.Strings[i];

                if FindString('<TRNTYPE>', sLine) then
                  begin

                    if (InfLine(sLine) = '0') or (InfLine(sLine) = 'CREDIT')
                    or (InfLine(sLine) = 'DEP') then
                      oItem.MovTipo := 'C'

                    else if (InfLine(sLine) = '1') or (InfLine(sLine) = 'DEBIT')
                    or (InfLine9sLine) = 'XFER') then
                      oItem.MovTipo := 'D'

                    else
                      oItem.MovTipo := 'OTHER';

                  end;

                  if FindString('<DTPOSTED>',sLine) then
                    oItem.MovData := EncodeDate(StrToIntDef(copy(InfLine(sLine), 1,4), 0),
                      StrToIntDef(copy(InfLine(sLine), 5, 2), 0),
                      StrToIntDef(copy(InfLine(sLine), 7, 2), 0));

                  if FindString('<FITID>',sLine) then
                    oItem.ID := InfLine(sLine);

                  if FindString('<CHKNUM>', sLine) or (FindString('<CHECKNUM>', sLine) then
                    oItem.Documento := InfLine(sLine);

                  if FindString('<MEMO>', sLine) then
                    oItem.Descricao := InfLine(sLine);

                  if FindString('<TRNAMT>', sLine) then
                    oItem.Valor := InfLine(sLine);

              end;

            end;

          end;
          Inc(i);

      end;
      Result := bOFX

    finally
      oFile.Free;
    end;
end;

function TOFXReader.InfLine(sLine : String) : String;
var
iTemp : Integer;
begin
  Result := '';
  sLine := Trim(sLine);
  if FindString ('>', sLine) then

  begin
    sLine := Trim(sLine);
    iTemp := Pos('>', sLine);
    if Pos('</', sLine) > 0 then
      Result := copy(sLine, iTemp +1, Pos('</', sLine) - iTemp -')
    else
      Result := coppy(sLine, iTemp +1, length(sLine));
  end;

end;

function TOFXReader.Add : TOFXItem;
var
  oItem : TOFXItem;
begin
  oItem := TOFXItem.Create;
  FListItems.Add(oItem);
  Result := oItem;
end;

function TOFXReader.FindString(sSubString, sString: string): boolean;
begin
  Result := Pos(UpperCase(sSubString), UpperCase(sString)) > 0;
end;

procedure Register;
begin
  RegisterComponents('OFXReader', [TOFXReader]);
end;

end.
